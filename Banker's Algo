/* Write a Multithread Program that implements the Banker's Algorithm. Create n threads that request and release resources from the bank.
The Banker will grant the request only if it leaves the system in a safe state. It is important that shared data be in safe from 
concurrent access. To ensure safe access to shared data, you can use Mutex locks.*/

#include <stdio.h>
#include <stdlib.h>
int main()
{
	int maximum[10][10], need[10][10], allocation[10][10], available[10], completed[10], SafeSequence[10];
	int i, j, x, y, process, ct=0;
	
	printf("Enter the no of processes : ");
	scanf("%d", &x);
	for(i = 0; i< x; i++)
	{
		completed[i] = 0;
	}
	
	printf("\n\nEnter the no of resources : "); 
	scanf("%d", &y);

	printf("\n\nEnter the Maximum Matrix for each process : ");
	for(i = 0; i < x; i++)
	{
		printf("\nFor process %d : ", i + 1);
		for(j = 0; j < y; j++)
		scanf("%d", &maximum[i][j]);
	}
	
	printf("\n\nEnter the Allocation for each process : ");
	for(i = 0; i < x; i++)
	{
		printf("\nFor process %d : ",i + 1);
		for(j = 0; j < y; j++)
		scanf("%d", &allocation[i][j]); 
	}
	
	printf("\n\nEnter the Available Resources : ");
	for(i = 0; i < y; i++)
		scanf("%d", &available[i]);   
	for(i = 0; i < x; i++)
		for(j = 0; j < y; j++)
			need[i][j] = maximum[i][j] - allocation[i][j];
